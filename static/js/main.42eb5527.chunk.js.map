{"version":3,"sources":["serviceWorker.js","components/Navbar/Navbar.js","components/Form/Form.js","components/Modal/Modal.js","components/PostGrid/assets/PostGridItem/PostGridItem.js","components/PostGrid/PostGrid.js","components/Footer/Footer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","props","title","useStyles","makeStyles","text","width","color","multilineColor","button","marginTop","grid","marginBottom","Form","classes","Grid","className","container","spacing","item","sm","lg","TextField","onChange","onTextChange","id","label","ResponsiveDialog","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","React","useState","open","setOpen","Dialog","isOpen","onClose","aria-labelledby","DialogTitle","style","textAlign","DialogContent","src","img","DialogActions","marginLeft","fullWidth","value","disabled","Tooltip","Button","onClick","e","copyText","document","getElementById","select","setSelectionRange","execCommand","PostGridItem","showModal","gridlistTitle","tags","subtitle","user","actionIcon","largeImageURL","height","PostGrid","posts","length","query","map","post","key","gridList","cellHeight","cols","Footer","App","state","search","currentPage","Items","totalHits","hasContent","handleClick","bind","handlePageChange","this","target","replace","setState","page","request","console","log","axios","get","then","res","data","hits","display","BottomNavigation","Pagination","count","Component","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42eb5527.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport AppBar from 'material-ui/AppBar'\nfunction Navbar(props){\n    return(\n        <AppBar title={props.title} />\n    ) \n}\n\nexport default Navbar;","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport teal from '@material-ui/core/colors/teal';\nconst useStyles = makeStyles({\n  text: {\n    width: \"100%\",\n    color:'#3BBDD4'\n  },\n \n    multilineColor: {\n       \n    },\n\n  button: {\n    marginTop: \"1em\",\n  },\n  grid: {\n    marginTop: \"2em\",\n    marginBottom:\"5em\"\n  },\n});\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Form(props) {\n  const classes = useStyles();\n  return (\n    <div>\n      {/* Starting of Grid System */}\n      <Grid className={classes.grid} container spacing={3}>\n        <Grid item sm={1} lg={3}></Grid>\n        <Grid item sm={10} lg={6} >\n         \n            <TextField  onChange={props.onTextChange}\n            className={classes.text}\n            id=\"standard-basic\"\n            label=\"Search\"\n          />\n       \n        </Grid>\n\n        <Grid item sm={1} lg={3}></Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField' ;\nimport Grid from '@material-ui/core/Grid';     \nimport Tooltip from '@material-ui/core/Tooltipnexport default function ResponsiveDialog(props) {\n  \n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const [open, setOpen] = React.useState(false);\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n    function onCopy(e){\n        const copyText=document.getElementById(\"txt\")\n          /* Select the text field */\n  copyText.select();\n  copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n  /* Copy the text inside the text field */\n  document.execCommand(\"copy\");\nhandleOpen();\n    }\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        onClose={props.onClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\" style={{textAlign:\"center\"}} >Copy Image</DialogTitle>\n        <DialogContent>\n          <img src={props.img} width=\"100%\"/>\n        </DialogContent>\n        <DialogActions>\n            <Grid container >\n            \n            <Grid item sm={6} style={{marginLeft:\".8em\"}} lg={10} ><TextField id=\"txt\" fullWidth value={props.img} disabled /></Grid>\n            <Grid item lg={1}>\n            <Tooltip open={open}   title=\"Copied\">\n                <Button style={{marginBottom:\".9em\",marginLeft:\".5em\"}} onClick={onCopy} >Copy</Button>\n            </Tooltip>\n            </Grid>\n            </Grid>\n\n{/*             \n          <Button onClick={props.onClose} color=\"primary\" autoFocus>\n            Agree\n          </Button> */}\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from \"react\";\nimport FlatButton from 'material-ui/FlatButton'\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"../../../Modal/Modal\";\nimport GridTile from 'material-ui/GridList/GridTile'\nfunction PostGridItem(props) {\n    const [open, setOpen] = React.useState(false);\n  const useStyles = makeStyles({\n    gridlistTitle: {\n\n    \n    },\n    img:{\n    \n    }\n  });\n  function showModal() {\n        setOpen(true)\n  }\n  function closeModel(){\n      setOpen(false)\n  }\n  const classes = useStyles();\n  return (\n   \n    \n        <GridTile className={classes.gridlistTitle}\n        title={props.src.tags}\n        subtitle={\n          <span>\n            by <strong>{props.src.user}</strong>\n          </span>\n        }\n        actionIcon={\n          <IconButton>\n            <ZoomIn color=\"white\"  onClick={showModal} ></ZoomIn>\n          </IconButton>\n        }\n        \n        >\n        <img className={classes.img}\n          src={props.src.largeImageURL}\n        width=\"100%\"\n        height=\"100%\"\n          onClick={showModal}\n        /> \n        <Modal isOpen={open} onClose={closeModel} img={props.src.largeImageURL} />\n        </GridTile>\n       \n    \n    \n  );\n}\n\nexport default PostGridItem;\n","import React from \"react\";\nimport PostGridItem from \"./assets/PostGridItem/PostGridItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport GridList from 'material-ui/GridList'\n\n\nfunction PostGrid(props) {\n  const useStyles = makeStyles((theme) => ({\n    // root: {\n    //   display: \"flex\",\n    //   flexWrap: \"wrap\",\n    //   justifyContent: \"space-around\",\n    //   overflow: \"hidden\",\n    //   backgroundColor: theme.palette.background.paper,\n    // },\n    // gridList: {\n    //   // width: \"100%\",\n    //   // height:\"100%\"\n      \n    // },\n  }));\n  const classes = useStyles();\n  const style = { textAlign: \"center\" };\n  const item =\n    props.posts.length !== 0 || props.query ===''  ? (\n      props.posts.map((post) => (\n        <PostGridItem src={post} key={post.id} />\n      ))\n    ) : (\n      <h1 style={style}>No Result Found</h1>\n    );\n\n  return (\n    \n      <GridList className={classes.gridList} cellHeight={150} cols={3}>\n        {item}\n      </GridList>\n    \n  );\n}\nexport default PostGrid;\n","import React from \"react\";\nimport \"./footer.css\";\nexport default function Footer() {\n  return (\n   <footer>\n        <div className=\"footer\">\n      <p>Crafted By SankalpaFernando With </p>\n      <img\n        src=\"https://cdn4.iconfinder.com/data/icons/logos-3/600/React.js_logo-512.png\"\n        width=\"40\"\n        height=\"40\"\n      />\n    </div>\n   </footer>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Form from \"./components/Form/Form\";\nimport PostGrid from './components/PostGrid/PostGrid';\nimport axios from 'axios'\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles'\nimport Pagination from '@material-ui/lab/Pagination'\nimport {makeStyles} from '@material-ui/core/styles'\nimport './App.css'   \nimport Grid from '@material-ui/core/Grid'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport Footer from './components/Footer/Footer'\nconst key =\"15976988-c8c786d83f79eeca9bef9c200\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      search:'',\n      currentPage: 0,\n      Items: [],\n      totalHits:0\n    };\n  \n\n\n\n    this.hasContent =false\n    this.handleClick = this.handleClick.bind(this);\n    this.handlePageChange =this.handlePageChange.bind(this)\n  }\n  handleClick(e) {\n    var query =''\n    if (e === null){\n       query= this.state.search\n    }\n    else{\n       query= (e.target.value).replace(' ', '+');\n       this.setState({\n         search:query,\n         currentPage:0\n       })\n    }\n\n    if(query!==''){\n      this.hasContent=true;\n    }\n\n\n    const page=this.state.currentPage + 1;\n    \n    const request = `https://pixabay.com/api/?key=${key}&q=${query}&image_type=photo&page=${page}&per_page=12`\n    console.log(request)\n    axios\n      .get(request)\n      .then((res) => {\n        this.setState({\n          Items:res.data.hits,\n          totalHits:res.data.totalHits\n        })\n       \n       \n      });\n  }\n  componentDidMount(){\n    \n  }\n  componentDidUpdate(){\n\n  }\n  \n  handlePageChange(e,value){\n    this.setState({\n      currentPage:value\n    })\n    this.handleClick(e=null)\n  }\n  \n  render() {\n    const style={display:''}\n\n    if (!this.hasContent){\n      style.display=\"none\"\n    }\n    else{\n      style.display=\"block\"\n    }\n    console.log()\n\n    return (\n\n        <MuiThemeProvider >\n\n        <div>\n            <Navbar title=\"ImageHunt\" />\n            <Form onTextChange={this.handleClick} />\n            <PostGrid posts={this.state.Items} currentPage={this.state.currentPage} query={this.state.search} />\n            <BottomNavigation  >\n               <Grid container className=\"grid-content\" > \n                <Grid item lg={5}></Grid>\n                <Grid style={style}  item lg={3} spacing={5}  > <Pagination   page={this.state.currentPage}  color=\"primary\" count={4} onChange={this.handlePageChange} /></Grid>\n                <Grid item lg={4}></Grid>\n            </Grid>\n            </BottomNavigation>\n           \n          \n          <Footer />\n           \n        </div>\n        \n        </MuiThemeProvider>\n        \n      \n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\nReactDOM.render(\n  <MuiThemeProvider>\n    <div>\n      <App />\n    </div>\n  </MuiThemeProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}